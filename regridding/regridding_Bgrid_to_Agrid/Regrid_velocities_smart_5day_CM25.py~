#!/usr/bin/env python

# import modules
import netCDF4 as nc
import os,sys
import numpy as np
import jdcal as jc
import math
from jdcal import jd2gcal
from jdcal import gcal2jd
import time as timmee
np.set_printoptions(threshold=np.nan)

#####################################################
##                                                 ##
##        RESAVE CMS VELOCITIES FUNCTION           ##
##                                                 ##
## This script calculates the mean component of    ##
## temp_advection for use with ocean_budgets       ##
## diagnostics. The velocities are saved in        ##
## /archive/$user/$model/$exp/for_CMS_SO_$vlength/ ##
##                                                 ##
#####################################################

yy_start = 181
yy_end = 200
user = 'Henri.Drake'
cms_exp = 'cm2p6_1860_upwelling_10y100'
model = 'CM2.5'
vlength = '20yr_null/'
exp = 'CM2.5_A_Control-1860_Y03-MBLING-BLING/'

# path to velocity data:
path2files = '/archive/akm/CM2.5/CM2.5_A_Control-1860_Y03-MBLING-BLING/history/'
path2w = '/archive/'+user+'/'+model+'/'+exp+'/5day/for_CMS_SO/'

# Path to save velocity files
path2save   = '/archive/'+user+'/'+model+'/'+exp+'/5day/for_CMS_SO/'
if not os.path.lexists(path2save):
    os.mkdir(path2save)

# Path to CMS folder (for input and output)
path2cms   = '/archive/'+user+'/CMS/'

# define domain region to save velocities:
lat_north = -29.5
lat_south = -81

# u and v are yearly files with len(time) = 73 for 5-day
# w is already saved in 5-day files because we computed it
for year in range(yy_start,yy_end+1):
	
	print 'Now doing year '+str(year)
	u_file = path2files+str(year).zfill(4)+'0101.ocean_bgc_physics_field_u.nc'
	ncFile = nc.Dataset(u_file)
	times = ncFile.variables['time'][...]
	ncFile.close()
	ntimes = len(times)
	months = np.zeros(ntimes)
	days = np.zeros(ntimes)
	for t in range(len(times)):
		months[t] = jd2gcal(1721423,times[t])[1]
		days[t] = jd2gcal(1721423,times[t])[2]
	for fiveday in range(0,ntimes):
        
            month = months[fiveday]
            day = days[fiveday]
            u_file = path2files+str(year).zfill(4)+'0101.ocean_bgc_physics_field_u.nc'
            print u_file
            ncFile = nc.Dataset(u_file)
            if ((year == yy_start) and (fiveday == 0)):
                st_ocean = ncFile.variables['st_ocean'][...]
                yu_ocean = ncFile.variables['yu_ocean'][...]
                xu_ocean = ncFile.variables['xu_ocean'][...]
			
                # find lat/long indices smaller domain:
                lat_n_index = (np.abs(yu_ocean-lat_north)).argmin()
			
                yu_ocean = yu_ocean[:lat_n_index]
		continue
            if ((year == yy_end) and (fiveday == 72)):
                continue

            average_DT = ncFile.variables['average_DT'][fiveday]
        
            u = (ncFile.variables['u'][fiveday,:,:lat_n_index,:]).filled(fill_value = 0)
            # Change this probably
            time = ncFile.variables['time'][fiveday]
            ncFile.close()

            v_file = path2files+str(year).zfill(4)+'0101.ocean_bgc_physics_field_v.nc'
            ncFile = nc.Dataset(v_file)
            v = (ncFile.variables['v'][fiveday,:,:lat_n_index,:]).filled(fill_value = 0)
            ncFile.close()

            w_file = path2w+'ocean.'+str(year).zfill(4)+str(int(month)).zfill(2)+str(int(day)).zfill(2)+'.w.nc'
            ncFile = nc.Dataset(w_file)
            w = (ncFile.variables['w'][0,:,:lat_n_index+1,:]).filled(fill_value = 0)
            sw_ocean = ncFile.variables['sw_ocean'][...]
            xt_ocean = ncFile.variables['xt_ocean'][...]
            yt_ocean = ncFile.variables['yt_ocean'][...]

            ncFile.close()

            ################################################

            # save u:
            out_filename_u = path2save+'ocean.'+str(year).zfill(4)+str(month).zfill(2)+str(day).zfill(2)+'.u.nc'
            print 'Saving calculation in: '+out_filename_u

            netcdf_file = nc.Dataset(out_filename_u, 'w', format='NETCDF4')
            netcdf_file.description = exp

            # dimensions
            netcdf_file.createDimension('time', None)
            netcdf_file.createDimension('st_ocean', len(st_ocean))
            netcdf_file.createDimension('yu_ocean', len(yu_ocean))
            netcdf_file.createDimension('xu_ocean', len(xu_ocean))
            netcdf_file.createDimension('yt_ocean', len(yt_ocean))
            netcdf_file.createDimension('xt_ocean', len(xt_ocean))

            # variables
            ti = netcdf_file.createVariable('time', 'f4', ('time',))
            ti.units = 'days since 0001-01-01 00:00:00'
            ti.calender_type = 'JULIAN'
            ti.calender = 'JULIAN'

            st = netcdf_file.createVariable('st_ocean', 'f4', ('st_ocean',))
            st.units = 'metres'
            st.long_name = 'tcell zstar depth'
            st.positive = 'down'

            yu = netcdf_file.createVariable('yu_ocean', 'f4', ('yu_ocean',))
            yu.units = 'degrees_N'
            yu.long_name = 'ucell latitude'

            xu = netcdf_file.createVariable('xu_ocean', 'f4', ('xu_ocean',))
            xu.units = 'degrees_E'
            xu.long_name = 'ucell longitude'

            long = netcdf_file.createVariable('geolon_c', 'f4', ('yu_ocean', 'xu_ocean',))
            long.units = 'degrees_E'
            long.long_name = 'velocity longitude'

            lat = netcdf_file.createVariable('geolat_c', 'f4', ('yu_ocean', 'xu_ocean',))
            lat.units = 'degrees_N'
            lat.long_name = 'velocity latitude'

            dt = netcdf_file.createVariable('average_DT', 'f4', ('time',))
            dt.units = 'days'
            dt.long_name = 'length of average period'

            u_var = netcdf_file.createVariable('u', 'f4', ('time','st_ocean','yu_ocean', 'xu_ocean',),fill_value = 0)
            u_var.units = 'm/s'
            u_var.long_name = 'zonal velocity'
            u_var.missing_value = 0

            # umask
            umask = u.mask

            # Add a bottom layer that will contain a boundary so that CMS has 0 velocities to interpolate with
            u_null_mask = u
            u_null_mask[u_null_mask.mask == True] = -1.e20
            u_null_mask = np.insert(u_null_mask,len(st_ocean)-1,-1.e20,axis=1)

            # Reapply mask
            u_regridded = ma.masked_array(u_null_mask, mask=(u_null_mask == -1.e20))

            # data
            ti[:] = time
            st[:] = st_ocean
            yu[:] = yu_ocean
            xu[:] = xu_ocean
            u_var[0,:] = u_regridded
            long[:] = geolon_c
            lat[:] = geolat_c
            dt[:] = average_DT
               
            netcdf_file.close()

            ####################################################################

            # save v:
            out_filename_v = path2save+'ocean.'+str(year).zfill(4)+str(month).zfill(2)+str(day).zfill(2)+'.v.nc'
            print 'Saving calculation in: '+out_filename_v

            netcdf_file = nc.Dataset(out_filename_v, 'w', format='NETCDF4')
            netcdf_file.description = exp

            # dimensions
            netcdf_file.createDimension('time', None)
            netcdf_file.createDimension('st_ocean', len(st_ocean))
            netcdf_file.createDimension('yu_ocean', len(yu_ocean))
            netcdf_file.createDimension('xu_ocean', len(xu_ocean))
            netcdf_file.createDimension('yt_ocean', len(yt_ocean))
            netcdf_file.createDimension('xt_ocean', len(xt_ocean))

            # variables
            ti = netcdf_file.createVariable('time', 'f4', ('time',))
            ti.units = 'days since 0001-01-01 00:00:00'
            ti.calender_type = 'JULIAN'
            ti.calender = 'JULIAN'

            st = netcdf_file.createVariable('st_ocean', 'f4', ('st_ocean',))
            st.units = 'metres'
            st.long_name = 'tcell zstar depth'
            st.positive = 'down'

            yu = netcdf_file.createVariable('yu_ocean', 'f4', ('yu_ocean',))
            yu.units = 'degrees_N'
            yu.long_name = 'ucell latitude'

            xu = netcdf_file.createVariable('xu_ocean', 'f4', ('xu_ocean',))
            xu.units = 'degrees_E'
            xu.long_name = 'ucell longitude'

            long = netcdf_file.createVariable('geolon_c', 'f4', ('yu_ocean', 'xu_ocean',))
            long.units = 'degrees_E'
            long.long_name = 'velocity longitude'

            lat = netcdf_file.createVariable('geolat_c', 'f4', ('yu_ocean', 'xu_ocean',))
            lat.units = 'degrees_N'
            lat.long_name = 'velocity latitude'

            v_var = netcdf_file.createVariable('v', 'f4', ('time','st_ocean','yu_ocean', 'xu_ocean'),fill_value = 0)
            v_var.units = 'm/s'
            v_var.long_name = 'meridional velocity'
            v_var.missing_value = 0

            # vmask
            vmask = v.mask

            # Add a bottom layer that will contain a boundary so that CMS has 0 velocities to interpolate with
            v_null_mask = v
            v_null_mask[v_null_mask.mask == True] = -1.e20
            v_null_mask = np.insert(v_null_mask,len(st_ocean)-1,-1.e20,axis=1)

            # Reapply mask
            v_regridded = ma.masked_array(v_null_mask, mask=(v_null_mask == -1.e20))

            # data
            ti[:] = time
            st[:] = st_ocean
            yu[:] = yu_ocean
            xu[:] = xu_ocean
            v_var[0,:] = v_regridded
            long[:] = geolon_c
            lat[:] = geolat_c
    
            netcdf_file.close()
            ####################################################################

            # save wt:
            out_filename_wt = path2save+'ocean.'+str(year).zfill(4)+str(month).zfill(2)+str(day).zfill(2)+'.wt.nc'
            print 'Saving calculation in: '+out_filename_wt

            netcdf_file = nc.Dataset(out_filename_wt, 'w', format='NETCDF4')
            netcdf_file.description = exp

            # dimensions
            netcdf_file.createDimension('time', None)
            netcdf_file.createDimension('sw_ocean', len(sw_ocean))
            netcdf_file.createDimension('yt_ocean', len(yt_ocean))
            netcdf_file.createDimension('xt_ocean', len(xt_ocean))

            # variables
            ti = netcdf_file.createVariable('time', 'f4', ('time',))
            ti.units = 'days since 0001-01-01 00:00:00'
            ti.calender_type = 'JULIAN'
            ti.calender = 'JULIAN'

            st = netcdf_file.createVariable('st_ocean', 'f4', ('st_ocean',))
            st.units = 'metres'
            st.long_name = 'tcell zstar depth'
            st.positive = 'down'

            yu = netcdf_file.createVariable('yu_ocean', 'f4', ('yu_ocean',))
            yu.units = 'degrees_N'
            yu.long_name = 'ucell latitude'

            xu = netcdf_file.createVariable('xu_ocean', 'f4', ('xu_ocean',))
            xu.units = 'degrees_E'
            xu.long_name = 'ucell longitude'

            long = netcdf_file.createVariable('geolon_u', 'f4', ('yu_ocean', 'xu_ocean',))
            long.units = 'degrees_E'
            long.long_name = 'velocity longitude'

            lat = netcdf_file.createVariable('geolat_u', 'f4', ('yu_ocean', 'xu_ocean',))
            lat.units = 'degrees_N'
            lat.long_name = 'velocity latitude'

            w_var = netcdf_file.createVariable('wt', 'f4', ('time','st_ocean','yu_ocean', 'xu_ocean'),fill_value = 0)
            w_var.units = 'm/s'
            w_var.long_name = 'vertical velocity'
            w_var.missing_value = 0)

            n_xt = len(xt_ocean)
            n_yt = len(yt_ocean)
            n_sw = len(sw_ocean)

            # wmask
            wmask = w.mask

            # Replace mask with large values so interpolation gives large values if one of the 4 points is land.
            w_null_mask = w
            w_null_mask[w_null_mask.mask == True] = -1.e20

            # Horizontal Interpolation
            w_sw = w_null_mask[0,:,:-1,:]
            w_nw = w_null_mask[0,:,1:,:]
            w_se = np.roll(w_sw,-1,axis=-1)
            w_ne = np.roll(w_nw,-1,axis=-1)
            w2d = 0.25*(w_sw+w_nw+w_se+w_ne)
            w2d[w2d < -200] = -1.e20

            # Vertical Interpolation
            w_regridded[0,0,:,:] = w2d[0,0,:,:]*(st_ocean[0]/sw_ocean[0])
            w_regridded[0,1:,:,:] = w2d[0,:-1,:,:]+(w2d[0,1:,:,:]-w2d[0,:-1,:,:])*((st_ocean[1:]-sw_ocean[:-1])/(sw_ocean[1:]-sw_ocean[:-1]))
            w_regridded[w_regridded < -200] = -1.e20

            # Insert layer at the bottom (because of trilinear interpolation method in CMS)
            w_regridded = np.insert(w_regridded,len(st_ocean)-1,-1.e20,axis=1)

            # Make the cell below bottom cells have negative the velocities of the
            for i in range(0,n_xt):
                for j in range(0,n_yt):
                    b_ind = 0
                    for k in range(0,n_sw):
                        b_ind = k
                        if (k > 0):
                            if (w_regridded[0,k,j,i] < -200):
                                w_regridded[0,k,j,i] = -w_regridded[0,k-1,j,i]
                                break

            # Reapply mask
            w_regridded = ma.masked_array(w_regridded, mask=(w_regridded == -1.e20))

            # data
            ti[:] = time
            st[:] = st_ocean
            yu[:] = yu_ocean
            xu[:] = xu_ocean
            w_var[0,:] = w_regridded
            long[:] = geolon_u
            lat[:] = geolat_u

            netcdf_file.close()

